{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/component/mapOp/MapOperateComp.ts"],"names":["_decorator","Component","geometry","MeshRenderer","misc","Node","Quat","screen","Vec2","Vec3","GlobalConst","ray","v3_1","v3_2","v3_3","worldMatrix","Util","MsgEvent","Msg","ccclass","property","qt_1","mapHitPoint","maxAngle","minAngle","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","_moveDirty","_velocity","_speedScale","_meshRender","_preHit3DPoint","_noteTouchePoint","_rotaRatio","startAngle","originPos","onLoad","ins","mapPanel","node","getComponent","copy","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","moveView","OP_TOUCH_MOVE_MAP","noteMoveTochePoint","OP_RESET_CLICK_POINT","_updateHitPoint","onDisable","off","vec2","calculateHitPoint","set","out","camera","screenPointToRay","x","y","dis","intersect","rayModel","model","computeHit","getHitPointToGrid","inverseTransformPoint","scale","scaleX","mapGridWidth","scaleY","mapGridHeight","z","Math","floor","getHitPointToGridPosition","outGrid","_setMapPos","getWorldMatrix","transformMat4","moveMap","canHit","subtract","add","createSphere","parent","resetRotaAxisDirty","windowSize","width","height","sphere","setPosition","getPosition","setRotaCamera","setRotaPos","setRotaCamera2","cameraNode","wpos","worldPosition","rotax","angle","degreesToRadians","cosAngle","cos","sinAngle","sin","newY","newZ","transformQuat","rotation","emit","UPDATE_CAMERA_POSITION","lookAt","UPDATE_CAMERA_EULER_ANGLE","console","log","rotateAround","right","addAngle","localPosition","newX","update","dt","t","min","damp","updateRotation","_upadtePosition","lerp","scaleAndAdd","fromEuler","slerp","_calculateRotaPos2","rotateY","UP","_calculateRotaPos","radian","_testMatrixToMap","transformInverseRTS","ONE","divide"],"mappings":"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","sourcesContent":["import { _decorator, BoxCollider, Camera, CameraComponent, CanvasComponent, Component, director, EventTouch, game, geometry, MeshRenderer, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, ray, v3_1, v3_2, v3_3, worldMatrix } from '../../GlobalConst';\r\nimport { Util } from '../../framework/util';\r\nimport { MsgEvent } from '../../msg/MsgEvent';\r\nimport { Msg } from '../../msg/msg';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\nconst mapHitPoint: Vec3 = new Vec3();\r\nconst maxAngle = -30;\r\nconst minAngle = -89;\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere: Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n    private _moveDirty: boolean = true;\r\n\r\n    public static ins: MapOperateComp;\r\n    _velocity: Vec3 = new Vec3();\r\n    private _speedScale: number = 1;\r\n\r\n    _meshRender: MeshRenderer;\r\n\r\n    private _preHit3DPoint: Vec3 = new Vec3();\r\n    private _noteTouchePoint: Vec2 = new Vec2();\r\n    private _rotaRatio: number = 0.5;\r\n\r\n    protected onLoad(): void {\r\n        MapOperateComp.ins = this;\r\n        GlobalConst.mapPanel = this;\r\n        this._meshRender = this.node.getComponent(MeshRenderer);\r\n        Vec3.copy(this._eulerP, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE_MAP, this.noteMoveTochePoint.bind(this));\r\n        Msg.on(MsgEvent.OP_RESET_CLICK_POINT, this._updateHitPoint.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n    private _updateHitPoint(vec2: Vec2) {\r\n        this.calculateHitPoint(vec2);\r\n        this._preHit3DPoint.set(mapHitPoint);\r\n    }\r\n\r\n    /** 计算触发到地图上的点位, 传入屏幕坐标 */\r\n    public calculateHitPoint(vec2: Vec2, out?: Vec3) {\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(mapHitPoint, dis); // 性能要好些\r\n            out && out.set(mapHitPoint);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子, 传入屏幕坐标*/\r\n    public getHitPointToGrid(vec2: Vec2, out: Vec2) {\r\n        if (this.calculateHitPoint(vec2)) {\r\n            this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n            const scale = this.node.scale;\r\n            let scaleX = GlobalConst.mapGridWidth / scale.x;\r\n            let scaleY = GlobalConst.mapGridHeight / scale.z;\r\n\r\n            out.x = Math.floor(v3_1.x / scaleX);\r\n            out.y = Math.floor(v3_1.z / scaleY);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子中心坐标, 传入屏幕坐标 */\r\n    public getHitPointToGridPosition(vec2: Vec2, out: Vec3, outGrid:Vec2) {\r\n        if (this.calculateHitPoint(vec2)) {\r\n            this._setMapPos(out,outGrid);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _setMapPos(out: Vec3,outGrid:Vec2) {\r\n        this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n        const scale = this.node.scale;\r\n        let scaleX = GlobalConst.mapGridWidth / scale.x;\r\n        let scaleY = GlobalConst.mapGridHeight / scale.z;\r\n        \r\n        outGrid.x = Math.floor(v3_1.x / scaleX);\r\n        outGrid.y = Math.floor(v3_1.z / scaleY);\r\n\r\n        out.x = (outGrid.x + 0.5) * scaleX;\r\n        out.y = out.y;\r\n        out.z = (outGrid.y + 0.5) * scaleY;\r\n\r\n        this.node.getWorldMatrix(worldMatrix);\r\n        Vec3.transformMat4(out, out, worldMatrix);\r\n    }\r\n\r\n\r\n\r\n    noteMoveTochePoint(vec2: Vec2) {\r\n        this._moveDirty = true;\r\n        this._noteTouchePoint.set(vec2);\r\n    }\r\n\r\n    moveMap(vec2: Vec2) {\r\n        if (!this._moveDirty) return;\r\n        this._moveDirty = false;\r\n        let canHit = this.calculateHitPoint(vec2);\r\n\r\n        if (canHit) {\r\n            v3_1.set(mapHitPoint);\r\n            Vec3.subtract(v3_2, v3_1, this._preHit3DPoint);\r\n            // this._position.set(v3_1);\r\n            this._preHit3DPoint.set(v3_1);\r\n\r\n            this._velocity.add(v3_2); // 有时触摸的帧会多执行或者这个检测放到帧的时候执行\r\n            Util.createSphere(this.node.parent, 0.5, v3_1);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    private moveView(vec2: Vec2) {\r\n        this.resetRotaAxisDirty();\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n\r\n\r\n\r\n        this._rotaAxisDirty = false;\r\n        const camera = GlobalConst.camera;\r\n\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n        // console.time(\"射线检测时间：\");\r\n\r\n        let dis = geometry.intersect.rayModel(this._cameraRay, this._meshRender.model);\r\n        if (dis) {\r\n            this._cameraRay.computeHit(this._centerPoint, dis); // 性能要好些\r\n        }\r\n\r\n        // 暂时不用物理检测，比较耗时\r\n        // if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n        //     const r = PhysicsSystem.instance.raycastResults;\r\n        //     for (let i = 0; i < r.length; i++) {\r\n        //         const item = r[i];\r\n        //         if (item.collider.node.uuid == this.node.uuid) {\r\n        //             // 射线检测到自己了\r\n        //             this._centerPoint.set(item.hitPoint);\r\n        //         }\r\n        //     }\r\n        //     console.log(\"射线检测:\", r);\r\n        // } else {\r\n        //     console.log(\"射线检测:fail\");\r\n        // }\r\n        // console.timeEnd(\"射线检测时间：\");\r\n        // console.time(\"射线检测时间 01：\");\r\n        if (this.sphere) {\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n        this.startAngle = 0;\r\n        this.node.getPosition(this.originPos);\r\n        // console.timeEnd(\"射线检测时间 01：\");\r\n    }\r\n\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this.setRotaCamera(x);\r\n        this.setRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        // this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n\r\n    // TODO  旋转 有问题\r\n    setRotaCamera(x: number) {\r\n        return this.setRotaCamera2(x)\r\n        const cameraNode = GlobalConst.camera.node;\r\n        const wpos = cameraNode.parent.worldPosition;\r\n        Vec3.subtract(v3_1, wpos, this._centerPoint);\r\n\r\n        let rotax = x;\r\n\r\n        // 计算角度的旋转坐标\r\n        const angle = misc.degreesToRadians(rotax); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newY = v3_1.y * cosAngle - v3_1.z * sinAngle;\r\n        const newZ = v3_1.y * sinAngle + v3_1.z * cosAngle;\r\n        v3_1.set(0, newY, newZ);\r\n        Vec3.transformQuat(v3_1, v3_1, cameraNode.rotation);\r\n\r\n        v3_3.set(wpos.x, this._centerPoint.y + newY, newZ + this._centerPoint.z);\r\n        v3_3.set(this._centerPoint.x + v3_1.x, this._centerPoint.y + v3_1.y, v3_1.z + this._centerPoint.z);\r\n        // Vec3.transformQuat(v3_3, v3_3, GlobalConst.camera.node.rotation);\r\n        Msg.emit(MsgEvent.UPDATE_CAMERA_POSITION, v3_3);\r\n\r\n        cameraNode.lookAt(this._centerPoint); // 看向地图上的点\r\n\r\n        Msg.emit(MsgEvent.UPDATE_CAMERA_EULER_ANGLE, cameraNode.eulerAngles);\r\n    }\r\n\r\n    // TODO  旋转 有问题\r\n    setRotaCamera2(x: number) {\r\n        const cameraNode = GlobalConst.camera.node;\r\n        const eulerAngles = cameraNode.eulerAngles;\r\n        \r\n        if(eulerAngles.x + x < minAngle || eulerAngles.x + x > maxAngle){\r\n            console.log(\"超过极限了\");\r\n            if(eulerAngles.x + x < minAngle){\r\n                x = minAngle - eulerAngles.x;\r\n            }\r\n            if(eulerAngles.x + x > maxAngle){\r\n                x = maxAngle - eulerAngles.x;\r\n            }\r\n\r\n            console.log(\"解锁:eulerAngles.x + x : \" + eulerAngles.x + x);\r\n        }\r\n        const wpos = cameraNode.parent.worldPosition;\r\n        Vec3.subtract(v3_1, wpos, this._centerPoint); // 方向向量\r\n\r\n        let rotax = x;\r\n        const angle = misc.degreesToRadians(rotax); // 转换成弧度 \r\n        qt_1.set();\r\n        Quat.rotateAround(qt_1, qt_1, cameraNode.right, angle); // 计算四元素的值\r\n        Vec3.transformQuat(v3_1, v3_1, qt_1); // 绕四元素旋转\r\n\r\n        v3_3.set(this._centerPoint.x + v3_1.x, this._centerPoint.y + v3_1.y, v3_1.z + this._centerPoint.z);\r\n        // Vec3.transformQuat(v3_3, v3_3, GlobalConst.camera.node.rotation);\r\n        Msg.emit(MsgEvent.UPDATE_CAMERA_POSITION, v3_3);\r\n\r\n        cameraNode.lookAt(this._centerPoint); // 看向地图上的点\r\n\r\n        Msg.emit(MsgEvent.UPDATE_CAMERA_EULER_ANGLE, cameraNode.eulerAngles);\r\n    }\r\n\r\n\r\n\r\n    private startAngle: number = 0;\r\n    private originPos: Vec3 = new Vec3();\r\n    setRotaPos(addAngle: number) {\r\n\r\n        addAngle *= this._rotaRatio;\r\n        this._eulerP.y -= addAngle; // 一个旋转角度的计算不对也会导致地图展示出来不是想要的样子\r\n\r\n        this.startAngle += addAngle;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        Vec3.subtract(v3_1, this.originPos, this._centerPoint);\r\n        const localPosition = v3_1;\r\n        // const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this.startAngle); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // Util.createSphere(this.node.parent, 0.5, this._position);\r\n        // Res.instNode(this.sphere, this.node.parent, this._position);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        this.moveMap(this._noteTouchePoint)\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // // position\r\n        this._upadtePosition();\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n\r\n    private _upadtePosition() {\r\n        // Vec3.transformQuat(v3_1, this._velocity, this.node.rotation); //不需要跟旋转有关系，这里只需要按照世界坐标移动就好不然旋转后显示的效果就不对了\r\n        Vec3.scaleAndAdd(this._position, this._position, this._velocity, this._speedScale);\r\n        this._velocity.set();\r\n    }\r\n\r\n    private updateRotation(t: number) {\r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n\r\n    // ============================================== 废弃代码====================\r\n    private _calculateRotaPos2(y: number) {\r\n        this._eulerP.y += y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian: number) {\r\n        this._eulerP.y += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this._eulerP.y); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n\r\n\r\n\r\n    private _testMatrixToMap(out: Vec3) {\r\n        Vec3.transformInverseRTS(v3_1, mapHitPoint, this.node.rotation,\r\n            this.node.position, Vec3.ONE);\r\n\r\n        console.log(`hitpointx:${v3_1.x} hitpointy:${v3_1.y} hitpointz:${v3_1.z}`)\r\n        out.x = (Math.floor(v3_1.x / GlobalConst.mapGridWidth) + 0.5) * GlobalConst.mapGridWidth;\r\n        out.y = out.y;\r\n        out.z = (Math.floor(v3_1.z / GlobalConst.mapGridHeight) + 0.5) * GlobalConst.mapGridHeight;\r\n        // Vec3.transformMat4(child._pos, out, cur._mat);\r\n\r\n        this.node.getWorldMatrix(worldMatrix);\r\n        Vec3.transformMat4(out, out, worldMatrix);\r\n        out.divide(this.node.scale);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n"]}