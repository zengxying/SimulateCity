{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/framework/Handler.ts"],"names":["Handler","constructor","caller","method","args","once","_id","setTo","_gid","run","id","result","apply","recover","runWith","data","unshift","call","concat","clear","_pool","push","create","length","pop"],"mappings":"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","sourcesContent":["/**\r\n\t * <p><code>Handler</code> 是事件处理器类。</p>\r\n\t * <p>推荐使用 Handler.create() 方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover() 将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>\r\n\t * <p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>\r\n\t */\r\nexport class Handler {\r\n\r\n    /**@private handler对象池*/\r\n    protected static _pool: Handler[] = [];\r\n    /**@private */\r\n    private static _gid: number = 1;\r\n\r\n    /** 执行域(this)。*/\r\n    caller: Object|null;\r\n    /** 处理方法。*/\r\n    method: Function|null;\r\n    /** 参数。*/\r\n    args: any[]|null;\r\n    /** 表示是否只执行一次。如果为true，回调后执行recover()进行回收，回收后会被再利用，默认为false 。*/\r\n    once = false;\r\n\r\n    /**@private */\r\n    protected _id = 0;\r\n\r\n    /**\r\n     * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。\r\n     * @param\tcaller 执行域。\r\n     * @param\tmethod 处理函数。\r\n     * @param\targs 函数参数。\r\n     * @param\tonce 是否只执行一次。\r\n     */\r\n    constructor(caller: Object|null=null, method: Function|null=null, args: any[]|null = null, once: boolean = false) {\r\n        this.setTo(caller, method, args, once);\r\n    }\r\n\r\n    /**\r\n     * 设置此对象的指定属性值。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 回调方法。\r\n     * @param\targs 携带的参数。\r\n     * @param\tonce 是否只执行一次，如果为true，执行后执行recover()进行回收。\r\n     * @return  返回 handler 本身。\r\n     */\r\n    setTo(caller: any, method: Function|null, args: any[]|null, once=false): Handler {\r\n        this._id = Handler._gid++;\r\n        this.caller = caller;\r\n        this.method = method;\r\n        this.args = args;\r\n        this.once = once;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 执行处理器。\r\n     */\r\n    run(): any {\r\n        if (this.method == null) return null;\r\n        var id: number = this._id;\r\n        var result: any = this.method.apply(this.caller, this.args);\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 执行处理器，并携带额外数据。\r\n     * @param\tdata 附加的回调数据，可以是单数据或者Array(作为多参)。\r\n     */\r\n    runWith(data: any): any {\r\n        if (this.method == null) return null;\r\n        var id: number = this._id;\r\n        if (data == null)\r\n            var result: any = this.method.apply(this.caller, this.args);\r\n        else if (!this.args && !data.unshift) result = this.method.call(this.caller, data);\r\n        else if (this.args) result = this.method.apply(this.caller, this.args.concat(data));\r\n        else result = this.method.apply(this.caller, data);\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 清理对象引用。\r\n     */\r\n    clear(): Handler {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 清理并回收到 Handler 对象池内。\r\n     */\r\n    recover(): void {\r\n        if (this._id > 0) {\r\n            this._id = 0;\r\n            Handler._pool.push(this.clear());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 回调方法。\r\n     * @param\targs 携带的参数。\r\n     * @param\tonce 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。\r\n     * @return  返回创建的handler实例。\r\n     */\r\n    static create(caller: any, method: Function|null, args: any[]|null = null, once: boolean = true): Handler {\r\n        if (Handler._pool.length) \r\n            return (Handler._pool.pop() as Handler).setTo(caller, method, args, once);\r\n        return new Handler(caller, method, args, once);\r\n    }\r\n}\r\n\r\n"]}