{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/MapMgr.ts"],"names":["MapMgr","BoxCollider","Line","MeshRenderer","Quat","Vec3","geometry","v3","GlobalConst","ray","v3_1","worldMatrix","qt_1","mapHitPoint","constructor","_node","_meshRender","ins","_ins","node","mapPanel","getComponent","graphicsMapLine","box","line","getComponentInChildren","set","worldBounds","halfExtents","hGridCount","Math","floor","x","mapGridWidth","vGridCount","z","mapGridHeight","arr","y","push","positions","calculateHitPoint","vec2","out","camera","screenPointToRay","dis","intersect","rayModel","model","computeHit","getHitPointToGrid","inverseTransformPoint","scale","scaleX","scaleY","getHitPointToGridPosition","outGrid","_setMapPos","getWorldMatrix","transformMat4"],"mappings":"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","sourcesContent":["import { BoxCollider, Line, MeshRenderer, Node, Quat, Vec2, Vec3, geometry, v3 } from \"cc\";\r\nimport { GlobalConst, ray, v3_1, worldMatrix } from \"./GlobalConst\";\r\n\r\n\r\nconst qt_1 = new Quat();\r\nconst mapHitPoint: Vec3 = new Vec3();\r\n\r\nexport class MapMgr {\r\n\r\n    // 地图块的计算，当前地图有多少格子，那些格子可用\r\n    // 当前地图存在的建筑物\r\n    // 建筑物对应的状态\r\n    // 各个建筑物的状态更新\r\n    _node: Node;\r\n    _meshRender: MeshRenderer;\r\n    constructor() {\r\n\r\n    }\r\n\r\n\r\n    private static _ins: MapMgr;\r\n    public static get ins() {\r\n        return this._ins ||= new MapMgr();\r\n    }\r\n\r\n\r\n    public get node() {\r\n        this._node ||= GlobalConst.mapPanel\r\n        if (!this._meshRender) {\r\n            this._meshRender = this._node.getComponent(MeshRenderer);\r\n        }\r\n        return this._node;\r\n    }\r\n\r\n    graphicsMapLine() {\r\n        const node = this.node;\r\n        const box = node.getComponent(BoxCollider);\r\n        // const lineBox = new Node(\"line-box\");\r\n        // node.addChild(lineBox);\r\n        // let line = lineBox.addComponent(Line);\r\n        let line = node.getComponentInChildren(Line);\r\n        v3_1.set(box.worldBounds.halfExtents);\r\n        const hGridCount = Math.floor(v3_1.x * 2 / GlobalConst.mapGridWidth);\r\n        const vGridCount = Math.floor(v3_1.z * 2 / GlobalConst.mapGridHeight);\r\n        let arr = [];\r\n        for (let x = 0; x < 100; x++) {\r\n            for (let y = 100; y >= 0; y--) {\r\n                arr.push(\r\n                    v3(x, 0.2, y)\r\n                );\r\n            }\r\n        }\r\n        (<any>line.positions) = arr;\r\n    }\r\n\r\n    /** 计算触发到地图上的点位, 传入屏幕坐标 */\r\n    public calculateHitPoint(vec2: Vec2, out: Vec3) {\r\n        if (!this._node) this.node;\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(mapHitPoint, dis); // 性能要好些\r\n            out && out.set(mapHitPoint);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子, 传入屏幕坐标*/\r\n    public getHitPointToGrid(vec2: Vec2, out: Vec2) {\r\n        if (this.calculateHitPoint(vec2, mapHitPoint)) {\r\n            this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n            const scale = this.node.scale;\r\n            let scaleX = GlobalConst.mapGridWidth / scale.x;\r\n            let scaleY = GlobalConst.mapGridHeight / scale.z;\r\n\r\n            out.x = Math.floor(v3_1.x / scaleX);\r\n            out.y = Math.floor(v3_1.z / scaleY);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子中心坐标, 传入屏幕坐标 */\r\n    public getHitPointToGridPosition(vec2: Vec2, out: Vec3, outGrid: Vec2) {\r\n        if (this.calculateHitPoint(vec2, mapHitPoint)) {\r\n            this._setMapPos(out, outGrid);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _setMapPos(out: Vec3, outGrid: Vec2) {\r\n        this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n        const scale = this.node.scale;\r\n        let scaleX = GlobalConst.mapGridWidth / scale.x;\r\n        let scaleY = GlobalConst.mapGridHeight / scale.z;\r\n\r\n        outGrid.x = Math.floor(v3_1.x / scaleX);\r\n        outGrid.y = Math.floor(v3_1.z / scaleY);\r\n\r\n        out.x = (outGrid.x + 0.5) * scaleX;\r\n        out.y = out.y;\r\n        out.z = (outGrid.y + 0.5) * scaleY;\r\n\r\n        this.node.getWorldMatrix(worldMatrix);\r\n        Vec3.transformMat4(out, out, worldMatrix);\r\n    }\r\n}"]}