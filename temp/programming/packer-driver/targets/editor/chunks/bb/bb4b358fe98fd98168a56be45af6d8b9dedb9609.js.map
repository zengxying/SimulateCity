{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","MeshRenderer","misc","Node","Quat","screen","Vec3","GlobalConst","ray","v3_1","v3_2","v3_3","Msg","MsgEvent","Util","ccclass","property","qt_1","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","_velocity","_speedScale","_meshRender","_preHit3DPoint","_preHit3DOffset","startAngle","originPos","onLoad","ins","node","getComponent","copy","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","moveView","OP_TOUCH_MOVE_MAP","moveMap","OP_TOUCH_START","calculateHitPoint","onDisable","off","vec2","camera","screenPointToRay","x","y","dis","intersect","rayModel","model","computeHit","subtract","set","add","console","log","z","createSphere","parent","resetRotaAxisDirty","windowSize","width","height","time","timeEnd","sphere","setPosition","getPosition","setRotaPos","_calculateRotaPos2","rotateY","UP","_calculateRotaPos","radian","localPosition","angle","degreesToRadians","cosAngle","Math","cos","sinAngle","sin","newX","newZ","addAngle","update","dt","t","min","damp","updateRotation","_upadtePosition","lerp","transformQuat","rotation","scaleAndAdd","fromEuler","slerp"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, MeshRenderer, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, ray, v2_1, v3_1, v3_2, v3_3 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nimport { Res } from '../res';\r\nimport { Util } from '../framework/util';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere: Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n\r\n    public static ins: MapOperateComp;\r\n    private _velocity: Vec3 = new Vec3();\r\n    private _speedScale: number = 1;\r\n\r\n    _meshRender: MeshRenderer;\r\n\r\n    private _preHit3DPoint: Vec3 = new Vec3();\r\n    private _preHit3DOffset: Vec3 = new Vec3();\r\n\r\n    protected onLoad(): void {\r\n        MapOperateComp.ins = this;\r\n        this._meshRender = this.node.getComponent(MeshRenderer);\r\n        Vec3.copy(this._eulerP, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE_MAP, this.moveMap.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_START, this.calculateHitPoint.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    calculateHitPoint(vec2: Vec2) {\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(this._preHit3DPoint, dis); // 性能要好些\r\n        }\r\n    }\r\n\r\n    moveMap(vec2: Vec2) {\r\n\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(v3_1, dis); // 性能要好些\r\n            Vec3.subtract(v3_2, v3_1, this._preHit3DPoint);\r\n            // this._position.set(v3_1);\r\n            this._preHit3DPoint.set(v3_1);\r\n\r\n            this._velocity.add(v3_2); // 有时触摸的帧会多执行或者这个检测放到帧的时候执行\r\n            console.log(`this._velocity.x:${this._velocity.x} this._velocity.y:${this._velocity.y} this._velocity.z:${this._velocity.z}`);\r\n            Util.createSphere(this.node.parent, 0.5, v3_1);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    private moveView(vec2: Vec2) {\r\n        this.resetRotaAxisDirty();\r\n\r\n        // this._velocity.set(vec2.x, 0, vec2.y);\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n        this._rotaAxisDirty = false;\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n        console.time(\"射线检测时间：\");\r\n\r\n        let dis = geometry.intersect.rayModel(this._cameraRay, this._meshRender.model);\r\n        if (dis) {\r\n            this._cameraRay.computeHit(this._centerPoint, dis); // 性能要好些\r\n        }\r\n        // if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n        //     const r = PhysicsSystem.instance.raycastResults;\r\n        //     for (let i = 0; i < r.length; i++) {\r\n        //         const item = r[i];\r\n        //         if (item.collider.node.uuid == this.node.uuid) {\r\n        //             // 射线检测到自己了\r\n        //             this._centerPoint.set(item.hitPoint);\r\n        //         }\r\n        //     }\r\n        //     console.log(\"射线检测:\", r);\r\n        // } else {\r\n        //     console.log(\"射线检测:fail\");\r\n\r\n        // }\r\n        console.timeEnd(\"射线检测时间：\");\r\n        console.time(\"射线检测时间 01：\");\r\n        if (this.sphere) {\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n        this.startAngle = 0;\r\n        this.node.getPosition(this.originPos);\r\n        console.timeEnd(\"射线检测时间 01：\");\r\n    }\r\n\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this.setRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        // this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n    private _calculateRotaPos2(y: number) {\r\n        this._eulerP.y += y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian: number) {\r\n        this._eulerP.y += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this._eulerP.y); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n\r\n    private startAngle: number = 0;\r\n    private originPos: Vec3 = new Vec3();\r\n    setRotaPos(addAngle: number) {\r\n        this._eulerP.y -= addAngle; // 一个旋转角度的计算不对也会导致地图展示出来不是想要的样子\r\n\r\n        this.startAngle += addAngle;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        Vec3.subtract(v3_1, this.originPos, this._centerPoint);\r\n        const localPosition = v3_1;\r\n        // const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this.startAngle); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        Util.createSphere(this.node.parent, 0.5, this._position);\r\n        // Res.instNode(this.sphere, this.node.parent, this._position);\r\n\r\n        console.log(`center point : x_>${this._centerPoint.x} y_>${this._centerPoint.y} z_>${this._centerPoint.z}`)\r\n        console.log(`center point : x_>${this._centerPoint.x} y_>${this._centerPoint.y} z_>${this._centerPoint.z}`)\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        console.log(\"this._velocity.x : update\");\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // // position\r\n        this._upadtePosition();\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n\r\n    private _upadtePosition() {\r\n        Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);\r\n        Vec3.scaleAndAdd(this._position, this._position, v3_1, this._speedScale);\r\n        this._velocity.set();\r\n    }\r\n\r\n    private updateRotation(t: number) { //TODO 参考Laya吧 \r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n}\r\n\r\n\r\n"]}