{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/CameraControllerComp.ts"],"names":["_decorator","CameraComponent","Component","Quat","Vec2","Vec3","GlobalConst","Msg","MsgEvent","Log","ccclass","property","v2_1","v2_2","v3_1","v3_2","qt_1","forward","right","CameraControllerComp","slide","range","_camera","_velocity","_position","_speedScale","_eulerP","distanceZ","onLoad","ins","camera","node","getComponentInChildren","copy","getPosition","eulerAngles","onEnable","on","OP_TOUCH_MOVE","moveView","bind","OP_TOUCH_ROTA","rotaView","OP_TOUCH_SCALE","scaleView","onDisable","off","start","vec2","console","log","x","y","set","test","screenToWorld","z","speed","Math","abs","transformQuat","UNIT_Z","rotation","scaleAndAdd","position","update","dt","t","min","damp","moveSpeed","lerp","setPosition","moveDir","cameraMoveDir","lengthSqr","FORWARD","normalize","cross","UP","fromEuler","slerp","setWorldRotationFromEuler"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, Node, Quat, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { Log } from '../framework/Log';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst v2_1 = new Vec2();\r\nconst v2_2 = new Vec2();\r\n\r\nconst v3_1 = new Vec3();\r\nconst v3_2 = new Vec3();\r\nconst qt_1 = new Quat();\r\nconst forward = new Vec3();\r\nconst right = new Vec3();\r\n\r\n@ccclass('CameraControllerComp')\r\nexport class CameraControllerComp extends Component {\r\n\r\n    private _camera: CameraComponent;\r\n\r\n    @property\r\n    public moveSpeed = 1;\r\n\r\n    @property\r\n    public moveSpeedShiftScale = 5;\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n\r\n    @property\r\n    public rotateSpeed = 1;\r\n\r\n    private _velocity = new Vec3();\r\n    private _position = new Vec3();\r\n    private _speedScale = 1;\r\n    private _eulerP = new Vec3();\r\n\r\n    distanceZ: number = 20;\r\n\r\n    // 移动  单指\r\n\r\n    // 旋转  双指\r\n    // 缩放\r\n\r\n    // 边界\r\n    // 数据区间\r\n\r\n    // 插值运算\r\n\r\n    protected onLoad(): void {\r\n        CameraControllerComp.ins = this;\r\n        CameraControllerComp.camera = this._camera = this.node.getComponentInChildren(CameraComponent);\r\n        Vec3.copy(this._position, this.node.getPosition());\r\n        Vec3.copy(this._eulerP, this._camera.node.eulerAngles);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_SCALE, this.scaleView.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_MOVE);\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n        Msg.off(MsgEvent.OP_TOUCH_SCALE);\r\n    }\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n\r\n    /** 移动 */\r\n    public moveView(vec2:Vec2) {\r\n        console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n\r\n        this._velocity.set(vec2.x, vec2.y, 0);\r\n        // this._camera.screenToWorld(this._velocity,this._velocity);\r\n        // Vec3.subtract(this._velocity, this._velocity, this._position);\r\n    }\r\n\r\n    public static ins:CameraControllerComp;\r\n    public static camera:Camera;\r\n    public static test(vec2:Vec2){\r\n\r\n        console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        v3_2.set(vec2.x, vec2.y, 0);\r\n        this.ins._camera.screenToWorld(v3_2,v3_1);\r\n        console.log(\"转换出来的坐标:\", v3_1.x, v3_1.y, v3_1.z);\r\n    }\r\n\r\n    /** 缩放 */\r\n    public scaleView(speed: number) {\r\n        Log.log(\"scaleView -- speed:\"+speed);\r\n        if(Math.abs(this._position.z + speed) < this.distanceZ){\r\n            Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this._camera.node.rotation);\r\n            Vec3.scaleAndAdd(this._position, this.node.position, v3_1, speed);\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) {\r\n        \r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n        if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n            this._eulerP.x += x;\r\n        }\r\n        this._eulerP.y += y;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        return ;\r\n        const t = Math.min(dt / this.damp, 1);\r\n        // position\r\n        Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);\r\n        Vec3.scaleAndAdd(this._position, this._position, v3_1, this.moveSpeed * this._speedScale);\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n        const moveDir = GlobalConst.cameraMoveDir;\r\n        if (moveDir.lengthSqr()) {\r\n            Vec3.transformQuat(forward, Vec3.FORWARD, this.node.rotation);\r\n            forward.normalize();\r\n            Vec3.cross(right, forward, Vec3.UP);\r\n            right.normalize();\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, forward, this.moveSpeed * this._speedScale * moveDir.z);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, right, this.moveSpeed * this._speedScale * moveDir.x);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, Vec3.UP, this.moveSpeed * this._speedScale * moveDir.y);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n        }\r\n\r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this._camera.node.setWorldRotationFromEuler(this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        this._velocity.set();\r\n    }\r\n}\r\n\r\n\r\n"]}