{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/component/CameraControllerComp.ts"],"names":["_decorator","CameraComponent","Component","Quat","Vec3","GlobalConst","v3_1","Msg","MsgEvent","ccclass","property","qt_1","forward","right","CameraControllerComp","slide","range","_camera","_velocity","_position","_speedScale","distanceY","_rotation","onLoad","ins","camera","node","getComponentInChildren","copy","getPosition","rotation","onEnable","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_SCALE","scaleView","onDisable","off","speed","Math","abs","y","transformQuat","UNIT_Z","scaleAndAdd","position","vec2","x","rotateAround","update","dt","t","min","damp","moveSpeed","lerp","setPosition","moveDir","cameraMoveDir","lengthSqr","FORWARD","normalize","cross","UP","z","slerp","set","moveView","console","log","scale","multiplyScalar","moveView2","test"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, Node, Quat, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v3_1, v3_2 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\nconst forward = new Vec3();\r\nconst right = new Vec3();\r\n\r\n@ccclass('CameraControllerComp')\r\nexport class CameraControllerComp extends Component {\r\n\r\n    private _camera: CameraComponent;\r\n\r\n    @property\r\n    public moveSpeed = 1;\r\n\r\n    @property\r\n    public moveSpeedShiftScale = 5;\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n\r\n    @property\r\n    public rotateSpeed = 1;\r\n\r\n    private _velocity = new Vec3();\r\n    private _position = new Vec3();\r\n    private _speedScale = 1;\r\n\r\n    distanceY: number = 200;\r\n    private _rotation: Quat = new Quat();\r\n\r\n    // 移动  单指\r\n\r\n    // 旋转  双指\r\n    // 缩放\r\n\r\n    // 边界\r\n    // 数据区间\r\n\r\n    // 插值运算\r\n\r\n    protected onLoad(): void {\r\n        CameraControllerComp.ins = this;\r\n        GlobalConst.camera = this._camera = this.node.getComponentInChildren(CameraComponent);\r\n        Vec3.copy(this._position, this.node.getPosition());\r\n        Quat.copy(this._rotation,  this._camera.node.rotation);\r\n\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        // Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_SCALE, this.scaleView.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_SCALE);\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n    \r\n\r\n    /** 缩放 */\r\n    public scaleView(speed: number) {\r\n        // Log.log(\"scaleView -- speed:\"+speed);\r\n        if(Math.abs(this._position.y + speed) < this.distanceY){\r\n            Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this._camera.node.rotation);\r\n            Vec3.scaleAndAdd(this._position, this.node.position, v3_1, speed);\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        \r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n        \r\n        // Quat.rotateAround(this._rotation, this._rotation, this._camera.node.forward, y);\r\n        Quat.rotateAround(this._rotation, this._rotation, this._camera.node.right, x);\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        // position\r\n        Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);\r\n        Vec3.scaleAndAdd(this._position, this._position, v3_1, this.moveSpeed * this._speedScale);\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n        const moveDir = GlobalConst.cameraMoveDir;\r\n        if (moveDir.lengthSqr()) {\r\n            Vec3.transformQuat(forward, Vec3.FORWARD, this.node.rotation);\r\n            forward.normalize();\r\n            Vec3.cross(right, forward, Vec3.UP);\r\n            right.normalize();\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, forward, this.moveSpeed * this._speedScale * moveDir.z);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, right, this.moveSpeed * this._speedScale * moveDir.x);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, Vec3.UP, this.moveSpeed * this._speedScale * moveDir.y);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n        }\r\n\r\n        // rotation\r\n        Quat.slerp(qt_1, this._camera.node.rotation, this._rotation, t);\r\n        this._camera.node.rotation = qt_1;\r\n        this._velocity.set();\r\n    }\r\n\r\n\r\n    //===================================================== 废弃代码============================\r\n    /** 移动 */\r\n    public moveView(vec2:Vec2) {\r\n        console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        const scale = 1 + this._position.y / this.distanceY * 10;\r\n        vec2.multiplyScalar(scale);\r\n        this._velocity.set(vec2.x, 0, vec2.y);\r\n        // this._camera.screenToWorld(this._velocity,this._velocity);\r\n        // Vec3.subtract(this._velocity, this._velocity, this._position);\r\n    }\r\n\r\n    /** 移动 */\r\n    public moveView2(vec2:Vec2) {\r\n        console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        const scale = 1 + this._position.y / this.distanceY * 10;\r\n        vec2.multiplyScalar(scale);\r\n        this._velocity.set(vec2.x, 0, vec2.y);\r\n        // this._camera.screenToWorld(this._velocity,this._velocity);\r\n        // Vec3.subtract(this._velocity, this._velocity, this._position);\r\n    }\r\n\r\n    public static ins:CameraControllerComp;\r\n    public static camera:Camera;\r\n    public static test(vec2:Vec2){\r\n\r\n        // console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        // v3_2.set(vec2.x, vec2.y, 0);\r\n        // this.ins._camera.screenToWorld(v3_2,v3_1);\r\n        // console.log(\"转换出来的坐标:\", v3_1.x, v3_1.y, v3_1.z);\r\n    }\r\n}\r\n\r\n\r\n"]}