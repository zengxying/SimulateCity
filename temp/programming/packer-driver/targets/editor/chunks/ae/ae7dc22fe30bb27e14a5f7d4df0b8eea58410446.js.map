{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/operate/BuildingOperateComp.ts"],"names":["BuildingOperateComp","Vec2","GlobalConst","v2_1","v2_2","v3_1","MsgEvent","Msg","BuildingOperateState","constructor","comp","target","_longTouchTime","_state","NONE","_startTouchPoint","_comp","onTouchStart","e","interruptBuildingOp","console","warn","touches","getAllTouches","_isSinglePoint","scheduleOnce","onLongTouch","LONG_TOUCH_CHECK","getLocation","LONG_TOUCH_RUNNING","mapPanel","getHitPointToGridPosition","setPosition","length","onTouchMove","getDelta","lengthSqr","unschedule","SHORT_TOUCH_RUNNING","onTouchEnd","emit","OP_RESET_CLICK_POINT","OP_TOUCH_MOVE_MAP","OP_TOUCH_MOVE","set"],"mappings":"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","sourcesContent":["import { _decorator, Component, Quat, Vec2, Vec3, Input, game, EventTouch, Node } from 'cc';\r\nimport { GlobalConst, v2_1, v2_2, v3_1, v3_2 } from '../GlobalConst';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { Msg } from '../msg/msg';\r\nimport { IOperateHandler } from './IOperateLogic';\r\n\r\nenum BuildingOperateState {\r\n    NONE,\r\n    LONG_TOUCH_CHECK,\r\n    LONG_TOUCH_RUNNING,\r\n    SHORT_TOUCH_RUNNING,\r\n}\r\n\r\nexport class BuildingOperateComp implements IOperateHandler {\r\n\r\n    private target: Node;\r\n    private _longTouchTime: number = 1;\r\n\r\n    private _state: BuildingOperateState = BuildingOperateState.NONE;\r\n    private _startTouchPoint: Vec2 = new Vec2();\r\n\r\n    _comp:Component;\r\n    constructor(comp:Component){\r\n        this._comp = comp;\r\n    }\r\n\r\n\r\n    public onTouchStart(e: EventTouch) {\r\n        if (GlobalConst.interruptBuildingOp) return console.warn(\"中断操作中...............\");\r\n        // if (game.canvas.requestPointerLock) { game.canvas.requestPointerLock(); }\r\n        const touches = e.getAllTouches();\r\n        if (this._isSinglePoint(e)) {\r\n            this._comp.scheduleOnce(this.onLongTouch, this._longTouchTime);\r\n            this._state = BuildingOperateState.LONG_TOUCH_CHECK;\r\n            touches[0].getLocation(this._startTouchPoint);\r\n        }\r\n    }\r\n\r\n    onLongTouch() {\r\n        // 进入了拖动建筑物流程\r\n        this._state = BuildingOperateState.LONG_TOUCH_RUNNING;\r\n        GlobalConst.mapPanel.getHitPointToGridPosition(this._startTouchPoint, v3_1);\r\n        this.target.setPosition(v3_1);\r\n    }\r\n\r\n    private _isSinglePoint(e: EventTouch) {\r\n        return e.getAllTouches().length <= 1;\r\n    }\r\n\r\n    public onTouchMove(e: EventTouch) {\r\n        if (GlobalConst.interruptBuildingOp) return console.warn(\"中断操作中...............\");\r\n        const touches = e.getAllTouches();\r\n        if (this._isSinglePoint(e)) {\r\n\r\n            e.getDelta(v2_1);\r\n            if (this._state == BuildingOperateState.LONG_TOUCH_CHECK && v2_1.lengthSqr() > 100) {\r\n                this._state = BuildingOperateState.NONE;\r\n                this._comp.unschedule(this.onLongTouch);\r\n            }\r\n            if (this._state == BuildingOperateState.LONG_TOUCH_RUNNING) {\r\n                touches[0]\r\n                GlobalConst.mapPanel.getHitPointToGridPosition(this._startTouchPoint, v3_1);\r\n                this.target.setPosition(v3_1);\r\n            }\r\n            if (this._state == BuildingOperateState.SHORT_TOUCH_RUNNING) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTouchEnd(e: EventTouch) {\r\n        this._state = BuildingOperateState.NONE;\r\n        if (GlobalConst.interruptBuildingOp) return console.warn(\"中断操作中...............\");\r\n        // if (document.exitPointerLock) { document.exitPointerLock(); }\r\n        const touches = e.getAllTouches();\r\n        // console.log(\"onTouchEnd:-->\" + touches.length);\r\n        if (touches.length >= 1) { // 重置记录触屏点，更新射线检测点，这样双指操作中抬起一个手指不会导致屏幕移动           \r\n            touches[0].getLocation(v2_2);\r\n            Msg.emit(MsgEvent.OP_RESET_CLICK_POINT, v2_2);\r\n            // Util.getScreenToWorld(v2_2, v3_2, lv);\r\n            Msg.emit(MsgEvent.OP_TOUCH_MOVE_MAP, v2_2);\r\n        }\r\n\r\n        // this._continueMoveDirty = true;\r\n        Msg.emit(MsgEvent.OP_TOUCH_MOVE, v2_1.set(0, 0));\r\n    }\r\n\r\n}"]}