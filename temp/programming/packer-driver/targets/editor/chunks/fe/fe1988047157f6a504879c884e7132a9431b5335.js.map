{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","misc","Node","PhysicsSystem","Quat","screen","Vec3","v3_1","v3_2","v3_3","Msg","MsgEvent","CameraControllerComp","ccclass","property","qt_1","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","onLoad","copy","node","rotation","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","_resetRotaAxisDirty","onDisable","off","camera","screenPointToRay","windowSize","width","height","instance","raycast","r","raycastResults","i","length","item","collider","uuid","set","hitPoint","console","log","sphere","setPosition","vec2","x","y","radiansToDegrees","_calculateRotaPos2","getPosition","subtract","rotateY","UP","add","_calculateRotaPos","radian","localPosition","angle","degreesToRadians","cosAngle","Math","cos","sinAngle","sin","newX","z","newZ","update","dt","t","min","damp","updateRotation","lerp","fromEuler","slerp"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v2_1, v3_1, v3_2, v3_3 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere:Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n\r\n    protected onLoad(): void {\r\n        Vec3.copy(this._eulerP, this.node.rotation);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this._resetRotaAxisDirty.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    private _resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n        // this._rotaAxisDirty = false;\r\n        const camera = CameraControllerComp.camera;\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n\r\n        if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n            const r = PhysicsSystem.instance.raycastResults;\r\n            for (let i = 0; i < r.length; i++) {\r\n                const item = r[i];\r\n                if (item.collider.node.uuid == this.node.uuid) {\r\n                    // 射线检测到自己了\r\n                    this._centerPoint.set(item.hitPoint);\r\n                }\r\n            }\r\n            console.log(\"射线检测:\", r);\r\n        } else {\r\n            console.log(\"射线检测:fail\");\r\n\r\n        }\r\n\r\n        if(this.sphere){\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n        this._eulerP.y += misc.radiansToDegrees(y);\r\n\r\n        // this._calculateRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n    private _calculateRotaPos2(y: number) {\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian:number) {\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置\r\n        const angle = misc.degreesToRadians(radian); // 转换成弧度\r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // position\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n\r\n\r\n    }\r\n\r\n    private updateRotation(t: number) { //TODO 参考Laya吧 \r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n}\r\n\r\n\r\n"]}