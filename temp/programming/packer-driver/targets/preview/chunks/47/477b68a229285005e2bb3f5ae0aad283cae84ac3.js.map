{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","MeshRenderer","misc","Node","Quat","screen","Vec2","Vec3","GlobalConst","ray","v3_1","v3_2","v3_3","Msg","MsgEvent","Util","ccclass","property","qt_1","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","_moveDirty","_velocity","_speedScale","_meshRender","_preHit3DPoint","_noteTouchePoint","_rotaRatio","startAngle","originPos","onLoad","ins","node","getComponent","copy","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","moveView","OP_TOUCH_MOVE_MAP","noteMoveTochePoint","OP_RESET_CLICK_POINT","calculateHitPoint","onDisable","off","vec2","camera","screenPointToRay","x","y","dis","intersect","rayModel","model","computeHit","set","moveMap","subtract","add","createSphere","parent","resetRotaAxisDirty","windowSize","width","height","sphere","setPosition","getPosition","setRotaPos","addAngle","localPosition","angle","degreesToRadians","cosAngle","Math","cos","sinAngle","sin","newX","z","newZ","update","dt","t","min","damp","updateRotation","_upadtePosition","lerp","scaleAndAdd","fromEuler","slerp","rotation","_calculateRotaPos2","rotateY","UP","_calculateRotaPos","radian"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, MeshRenderer, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, ray, v2_1, v3_1, v3_2, v3_3 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nimport { Res } from '../res';\r\nimport { Util } from '../framework/util';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere: Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n    private _moveDirty: boolean = true;\r\n\r\n    public static ins: MapOperateComp;\r\n    private _velocity: Vec3 = new Vec3();\r\n    private _speedScale: number = 1;\r\n\r\n    _meshRender: MeshRenderer;\r\n\r\n    private _preHit3DPoint: Vec3 = new Vec3();\r\n    private _noteTouchePoint: Vec2 = new Vec2();\r\n    private _rotaRatio: number = 0.5;\r\n\r\n    protected onLoad(): void {\r\n        MapOperateComp.ins = this;\r\n        this._meshRender = this.node.getComponent(MeshRenderer);\r\n        Vec3.copy(this._eulerP, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE_MAP, this.noteMoveTochePoint.bind(this));\r\n        Msg.on(MsgEvent.OP_RESET_CLICK_POINT, this.calculateHitPoint.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    calculateHitPoint(vec2: Vec2) {\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(this._preHit3DPoint, dis); // 性能要好些\r\n        }\r\n    }\r\n\r\n    noteMoveTochePoint(vec2: Vec2){\r\n        this._moveDirty = true;\r\n        this._noteTouchePoint.set(vec2);\r\n    }\r\n\r\n    moveMap(vec2: Vec2) {\r\n        if(!this._moveDirty) return;\r\n        this._moveDirty = false;\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(v3_1, dis); // 性能要好些\r\n            Vec3.subtract(v3_2, v3_1, this._preHit3DPoint);\r\n            // this._position.set(v3_1);\r\n            this._preHit3DPoint.set(v3_1);\r\n\r\n            this._velocity.add(v3_2); // 有时触摸的帧会多执行或者这个检测放到帧的时候执行\r\n            Util.createSphere(this.node.parent, 0.5, v3_1);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    private moveView(vec2: Vec2) {\r\n        this.resetRotaAxisDirty();\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n        this._rotaAxisDirty = false;\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n        // console.time(\"射线检测时间：\");\r\n\r\n        let dis = geometry.intersect.rayModel(this._cameraRay, this._meshRender.model);\r\n        if (dis) {\r\n            this._cameraRay.computeHit(this._centerPoint, dis); // 性能要好些\r\n        }\r\n\r\n        // 暂时不用物理检测，比较耗时\r\n        // if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n        //     const r = PhysicsSystem.instance.raycastResults;\r\n        //     for (let i = 0; i < r.length; i++) {\r\n        //         const item = r[i];\r\n        //         if (item.collider.node.uuid == this.node.uuid) {\r\n        //             // 射线检测到自己了\r\n        //             this._centerPoint.set(item.hitPoint);\r\n        //         }\r\n        //     }\r\n        //     console.log(\"射线检测:\", r);\r\n        // } else {\r\n        //     console.log(\"射线检测:fail\");\r\n        // }\r\n        // console.timeEnd(\"射线检测时间：\");\r\n        // console.time(\"射线检测时间 01：\");\r\n        if (this.sphere) {\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n        this.startAngle = 0;\r\n        this.node.getPosition(this.originPos);\r\n        // console.timeEnd(\"射线检测时间 01：\");\r\n    }\r\n\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this.setRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        // this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n\r\n\r\n\r\n    private startAngle: number = 0;\r\n    private originPos: Vec3 = new Vec3();\r\n    setRotaPos(addAngle: number) {\r\n        \r\n        addAngle *= this._rotaRatio;\r\n        this._eulerP.y -= addAngle; // 一个旋转角度的计算不对也会导致地图展示出来不是想要的样子\r\n\r\n        this.startAngle += addAngle;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        Vec3.subtract(v3_1, this.originPos, this._centerPoint);\r\n        const localPosition = v3_1;\r\n        // const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this.startAngle); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        Util.createSphere(this.node.parent, 0.5, this._position);\r\n        // Res.instNode(this.sphere, this.node.parent, this._position);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        this.moveMap(this._noteTouchePoint)\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // // position\r\n        this._upadtePosition();\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n\r\n    private _upadtePosition() {\r\n        // Vec3.transformQuat(v3_1, this._velocity, this.node.rotation); //不需要跟旋转有关系，这里只需要按照世界坐标移动就好不然旋转后显示的效果就不对了\r\n        Vec3.scaleAndAdd(this._position, this._position, this._velocity, this._speedScale);\r\n        this._velocity.set();\r\n    }\r\n\r\n    private updateRotation(t: number) { \r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n\r\n    // ============================================== 废弃代码====================\r\n    private _calculateRotaPos2(y: number) {\r\n        this._eulerP.y += y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian: number) {\r\n        this._eulerP.y += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this._eulerP.y); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n}\r\n\r\n\r\n"]}