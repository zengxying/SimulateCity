{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","PhysicsSystem","Quat","screen","Vec3","v3_1","v3_2","v3_3","Msg","MsgEvent","CameraControllerComp","ccclass","property","qt_1","MapOperateComp","slide","range","_euler","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","onLoad","copy","node","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","_resetRotaAxisDirty","onDisable","off","camera","screenPointToRay","windowSize","width","height","instance","raycast","r","raycastResults","i","length","item","collider","uuid","set","hitPoint","console","log","vec2","x","y","getPosition","subtract","rotateY","UP","add","update","dt","t","Math","min","damp","lerp","setPosition","updateRotation","fromEuler","z","slerp","rotation"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v2_1, v3_1, v3_2, v3_3 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _euler: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n\r\n    protected onLoad(): void {\r\n        Vec3.copy(this._euler, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this._resetRotaAxisDirty.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    private _resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n        // this._rotaAxisDirty = false;\r\n        const camera = CameraControllerComp.camera;\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n\r\n        if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n            const r = PhysicsSystem.instance.raycastResults;\r\n            for (let i = 0; i < r.length; i++) {\r\n                const item = r[i];\r\n                if (item.collider.node.uuid == this.node.uuid) {\r\n                    // 射线检测到自己了\r\n                    this._centerPoint.set(item.hitPoint);\r\n                }\r\n            }\r\n            console.log(\"射线检测:\", r);\r\n        } else {\r\n            console.log(\"射线检测:fail\");\r\n\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n        console.log(\"yyyy----->\" + y);\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        // position\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n\r\n    private updateRotation(dt) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._euler.x, this._euler.y, this._euler.z);\r\n\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n}\r\n\r\n\r\n"]}