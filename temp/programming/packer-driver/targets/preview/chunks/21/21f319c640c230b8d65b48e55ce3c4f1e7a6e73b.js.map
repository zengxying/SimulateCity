{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/component/mapOp/MapOperateComp.ts"],"names":["_decorator","Component","geometry","MeshRenderer","misc","Node","Quat","screen","Vec2","Vec3","GlobalConst","ray","v3_1","v3_2","v3_3","Util","MsgEvent","Msg","ccclass","property","qt_1","mapHitPoint","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","_moveDirty","_velocity","_speedScale","_meshRender","_preHit3DPoint","_noteTouchePoint","_rotaRatio","startAngle","originPos","onLoad","ins","mapPanel","node","getComponent","copy","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","moveView","OP_TOUCH_MOVE_MAP","noteMoveTochePoint","OP_RESET_CLICK_POINT","_updateHitPoint","onDisable","off","vec2","calculateHitPoint","set","out","camera","screenPointToRay","x","y","dis","intersect","rayModel","model","computeHit","getHitPointToGrid","inverseTransformPoint","Math","floor","mapGridWidth","z","mapGridHeight","getHitPointToGridPosition","console","log","worldMatrix","moveMap","canHit","subtract","add","createSphere","parent","resetRotaAxisDirty","windowSize","width","height","sphere","setPosition","getPosition","setRotaPos","addAngle","localPosition","angle","degreesToRadians","cosAngle","cos","sinAngle","sin","newX","newZ","update","dt","t","min","damp","updateRotation","_upadtePosition","lerp","scaleAndAdd","fromEuler","slerp","rotation","_calculateRotaPos2","rotateY","UP","_calculateRotaPos","radian"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, CanvasComponent, Component, director, EventTouch, game, geometry, MeshRenderer, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, ray, v3_1, v3_2, v3_3 } from '../../GlobalConst';\r\nimport { Util } from '../../framework/util';\r\nimport { MsgEvent } from '../../msg/MsgEvent';\r\nimport { Msg } from '../../msg/msg';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\nconst mapHitPoint:Vec3 = new Vec3();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere: Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n    private _moveDirty: boolean = true;\r\n\r\n    public static ins: MapOperateComp;\r\n    private _velocity: Vec3 = new Vec3();\r\n    private _speedScale: number = 1;\r\n\r\n    _meshRender: MeshRenderer;\r\n\r\n    private _preHit3DPoint: Vec3 = new Vec3();\r\n    private _noteTouchePoint: Vec2 = new Vec2();\r\n    private _rotaRatio: number = 0.5;\r\n\r\n    protected onLoad(): void {\r\n        MapOperateComp.ins = this;\r\n        GlobalConst.mapPanel = this;\r\n        this._meshRender = this.node.getComponent(MeshRenderer);\r\n        Vec3.copy(this._eulerP, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE_MAP, this.noteMoveTochePoint.bind(this));\r\n        Msg.on(MsgEvent.OP_RESET_CLICK_POINT, this._updateHitPoint.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n    private _updateHitPoint(vec2: Vec2){\r\n        this.calculateHitPoint(vec2);\r\n        this._preHit3DPoint.set(mapHitPoint);\r\n    }\r\n\r\n    /** 计算触发到地图上的点位, 传入屏幕坐标 */\r\n    public calculateHitPoint(vec2: Vec2, out?:Vec3) {\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(mapHitPoint, dis); // 性能要好些\r\n            out && out.set(mapHitPoint);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子, 传入屏幕坐标*/\r\n    public getHitPointToGrid(vec2: Vec2, out:Vec2){\r\n        if(this.calculateHitPoint(vec2)){\r\n            this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n            out.x = Math.floor(v3_1.x / GlobalConst.mapGridWidth);\r\n            out.y = Math.floor(v3_1.z / GlobalConst.mapGridHeight);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子中心坐标, 传入屏幕坐标 */\r\n    public getHitPointToGridPosition(vec2: Vec2, out:Vec3){\r\n        if(this.calculateHitPoint(vec2)){\r\n            this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n            console.log(`hitpointx:${v3_1.x} hitpointy:${v3_1.y} hitpointz:${v3_1.z}`)\r\n            out.x = (Math.floor(v3_1.x / GlobalConst.mapGridWidth) + 0.5) * GlobalConst.mapGridWidth;\r\n            out.y = out.y;\r\n            out.z = (Math.floor(v3_1.z / GlobalConst.mapGridHeight) + 0.5) * GlobalConst.mapGridHeight;\r\n            // Vec3.transformMat4(child._pos, out, cur._mat);\r\n            this.node.worldMatrix\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    noteMoveTochePoint(vec2: Vec2){\r\n        this._moveDirty = true;\r\n        this._noteTouchePoint.set(vec2);\r\n    }\r\n\r\n    moveMap(vec2: Vec2) {\r\n        if(!this._moveDirty) return;\r\n        this._moveDirty = false;\r\n        let canHit = this.calculateHitPoint(vec2);\r\n\r\n        if (canHit) {\r\n            v3_1.set(mapHitPoint);\r\n            Vec3.subtract(v3_2, v3_1, this._preHit3DPoint);\r\n            // this._position.set(v3_1);\r\n            this._preHit3DPoint.set(v3_1);\r\n\r\n            this._velocity.add(v3_2); // 有时触摸的帧会多执行或者这个检测放到帧的时候执行\r\n            Util.createSphere(this.node.parent, 0.5, v3_1);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    private moveView(vec2: Vec2) {\r\n        this.resetRotaAxisDirty();\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n\r\n        \r\n        \r\n        this._rotaAxisDirty = false;\r\n        const camera = GlobalConst.camera;\r\n\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n        // console.time(\"射线检测时间：\");\r\n\r\n        let dis = geometry.intersect.rayModel(this._cameraRay, this._meshRender.model);\r\n        if (dis) {\r\n            this._cameraRay.computeHit(this._centerPoint, dis); // 性能要好些\r\n        }\r\n\r\n        // 暂时不用物理检测，比较耗时\r\n        // if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n        //     const r = PhysicsSystem.instance.raycastResults;\r\n        //     for (let i = 0; i < r.length; i++) {\r\n        //         const item = r[i];\r\n        //         if (item.collider.node.uuid == this.node.uuid) {\r\n        //             // 射线检测到自己了\r\n        //             this._centerPoint.set(item.hitPoint);\r\n        //         }\r\n        //     }\r\n        //     console.log(\"射线检测:\", r);\r\n        // } else {\r\n        //     console.log(\"射线检测:fail\");\r\n        // }\r\n        // console.timeEnd(\"射线检测时间：\");\r\n        // console.time(\"射线检测时间 01：\");\r\n        if (this.sphere) {\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n        this.startAngle = 0;\r\n        this.node.getPosition(this.originPos);\r\n        // console.timeEnd(\"射线检测时间 01：\");\r\n    }\r\n\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this.setRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        // this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n\r\n\r\n\r\n    private startAngle: number = 0;\r\n    private originPos: Vec3 = new Vec3();\r\n    setRotaPos(addAngle: number) {\r\n        \r\n        addAngle *= this._rotaRatio;\r\n        this._eulerP.y -= addAngle; // 一个旋转角度的计算不对也会导致地图展示出来不是想要的样子\r\n\r\n        this.startAngle += addAngle;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        Vec3.subtract(v3_1, this.originPos, this._centerPoint);\r\n        const localPosition = v3_1;\r\n        // const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this.startAngle); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        Util.createSphere(this.node.parent, 0.5, this._position);\r\n        // Res.instNode(this.sphere, this.node.parent, this._position);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        this.moveMap(this._noteTouchePoint)\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // // position\r\n        this._upadtePosition();\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n\r\n    private _upadtePosition() {\r\n        // Vec3.transformQuat(v3_1, this._velocity, this.node.rotation); //不需要跟旋转有关系，这里只需要按照世界坐标移动就好不然旋转后显示的效果就不对了\r\n        Vec3.scaleAndAdd(this._position, this._position, this._velocity, this._speedScale);\r\n        this._velocity.set();\r\n    }\r\n\r\n    private updateRotation(t: number) { \r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n\r\n    // ============================================== 废弃代码====================\r\n    private _calculateRotaPos2(y: number) {\r\n        this._eulerP.y += y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian: number) {\r\n        this._eulerP.y += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this._eulerP.y); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n}\r\n\r\n\r\n"]}