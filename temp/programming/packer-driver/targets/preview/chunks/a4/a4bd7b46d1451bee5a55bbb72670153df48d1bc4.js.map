{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/MapMgr.ts"],"names":["MapMgr","Line","MeshRenderer","Quat","Vec3","geometry","GlobalConst","ray","v3_1","worldMatrix","qt_1","mapHitPoint","constructor","_node","_meshRender","ins","_ins","node","mapPanel","getComponent","graphicsMapLine","line","addComponent","positions","calculateHitPoint","vec2","out","camera","screenPointToRay","x","y","dis","intersect","rayModel","model","computeHit","set","getHitPointToGrid","inverseTransformPoint","scale","scaleX","mapGridWidth","scaleY","mapGridHeight","z","Math","floor","getHitPointToGridPosition","outGrid","_setMapPos","getWorldMatrix","transformMat4"],"mappings":"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","sourcesContent":["import { Line, MeshRenderer, Node, Quat, Vec2, Vec3, geometry } from \"cc\";\r\nimport { GlobalConst, ray, v3_1, worldMatrix } from \"./GlobalConst\";\r\n\r\n\r\nconst qt_1 = new Quat();\r\nconst mapHitPoint: Vec3 = new Vec3();\r\n\r\nexport class MapMgr{\r\n\r\n    // 地图块的计算，当前地图有多少格子，那些格子可用\r\n    // 当前地图存在的建筑物\r\n    // 建筑物对应的状态\r\n    // 各个建筑物的状态更新\r\n    _node:Node;\r\n    _meshRender:MeshRenderer;\r\n    constructor(){\r\n        \r\n    }\r\n\r\n\r\n    private static _ins:MapMgr;\r\n    public static get ins(){\r\n        return this._ins ||= new MapMgr();\r\n    }\r\n\r\n\r\n    public get node(){\r\n        this._node ||= GlobalConst.mapPanel\r\n        if(! this._meshRender){\r\n            this._meshRender = this._node.getComponent(MeshRenderer);\r\n        }\r\n        return this._node;\r\n    }\r\n\r\n    graphicsMapLine(){\r\n        const node = this.node;\r\n        let line = node.addComponent(Line);\r\n        line.positions\r\n    }\r\n    \r\n    /** 计算触发到地图上的点位, 传入屏幕坐标 */\r\n    public calculateHitPoint(vec2: Vec2, out: Vec3) {\r\n        if(! this._node) this.node;\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(mapHitPoint, dis); // 性能要好些\r\n            out && out.set(mapHitPoint);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子, 传入屏幕坐标*/\r\n    public getHitPointToGrid(vec2: Vec2, out: Vec2) {\r\n        if (this.calculateHitPoint(vec2, mapHitPoint)) {\r\n            this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n            const scale = this.node.scale;\r\n            let scaleX = GlobalConst.mapGridWidth / scale.x;\r\n            let scaleY = GlobalConst.mapGridHeight / scale.z;\r\n\r\n            out.x = Math.floor(v3_1.x / scaleX);\r\n            out.y = Math.floor(v3_1.z / scaleY);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 获取点击的格子中心坐标, 传入屏幕坐标 */\r\n    public getHitPointToGridPosition(vec2: Vec2, out: Vec3, outGrid:Vec2) {\r\n        if (this.calculateHitPoint(vec2, mapHitPoint)) {\r\n            this._setMapPos(out,outGrid);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _setMapPos(out: Vec3,outGrid:Vec2) {\r\n        this.node.inverseTransformPoint(v3_1, mapHitPoint);\r\n        const scale = this.node.scale;\r\n        let scaleX = GlobalConst.mapGridWidth / scale.x;\r\n        let scaleY = GlobalConst.mapGridHeight / scale.z;\r\n        \r\n        outGrid.x = Math.floor(v3_1.x / scaleX);\r\n        outGrid.y = Math.floor(v3_1.z / scaleY);\r\n\r\n        out.x = (outGrid.x + 0.5) * scaleX;\r\n        out.y = out.y;\r\n        out.z = (outGrid.y + 0.5) * scaleY;\r\n\r\n        this.node.getWorldMatrix(worldMatrix);\r\n        Vec3.transformMat4(out, out, worldMatrix);\r\n    }\r\n}"]}