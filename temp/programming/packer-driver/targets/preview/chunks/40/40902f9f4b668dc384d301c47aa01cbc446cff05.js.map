{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/framework/poolManager.ts"],"names":["_decorator","instantiate","NodePool","ccclass","property","PoolManager","_dictPool","_dictPrefab","instance","_instance","getNode","prefab","parent","name","position","data","node","hasOwnProperty","pool","size","get","active","putNode","put","clearPool","clear","prePool","nodeNum","i","destroyNode","point","destroy"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA0BC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,Q,OAAAA,Q;;;;;;;;;OAC1C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;6BAGjBK,W,WADZF,OAAO,CAAC,aAAD,C,2BAAR,MACaE,WADb,CACyB;AAAA;AACrB;AACA;;AAEA;AACA;AACA;AANqB,eAQbC,SARa,GAQI,EARJ;AAAA,eASbC,WATa,GASM,EATN;AAAA;;AAYrB;AACA;;AAEA;AACA;AACA;AAEmB,mBAARC,QAAQ,GAAI;AACnB,cAAI,KAAKC,SAAT,EAAoB;AAChB,mBAAO,KAAKA,SAAZ;AACH;;AAED,eAAKA,SAAL,GAAiB,IAAIJ,WAAJ,EAAjB;AACA,iBAAO,KAAKI,SAAZ;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,OAAO,CAAEC,MAAF,EAAkBC,MAAlB,EAAgC;AAC1C,cAAIC,IAAI,GAAGF,MAAM,CAACE,IAAlB,CAD0C,CAE1C;;AACA,cAAI,CAACF,MAAM,CAACG,QAAZ,EAAsB;AAClB;AACAD,YAAAA,IAAI,GAAGF,MAAM,CAACI,IAAP,CAAYF,IAAnB;AACH;;AAED,eAAKN,WAAL,CAAiBM,IAAjB,IAAyBF,MAAzB;AACA,cAAIK,IAAI,GAAG,IAAX;;AACA,cAAI,KAAKV,SAAL,CAAeW,cAAf,CAA8BJ,IAA9B,CAAJ,EAAyC;AACrC;AACA,gBAAIK,IAAI,GAAG,KAAKZ,SAAL,CAAeO,IAAf,CAAX;;AACA,gBAAIK,IAAI,CAACC,IAAL,KAAc,CAAlB,EAAqB;AACjBH,cAAAA,IAAI,GAAGE,IAAI,CAACE,GAAL,EAAP;AACH,aAFD,MAEO;AACHJ,cAAAA,IAAI,GAAGf,WAAW,CAACU,MAAD,CAAlB;AACH;AACJ,WARD,MAQO;AACH;AACA,gBAAIO,KAAI,GAAG,IAAIhB,QAAJ,EAAX;;AACA,iBAAKI,SAAL,CAAeO,IAAf,IAAuBK,KAAvB;AAEAF,YAAAA,IAAI,GAAGf,WAAW,CAACU,MAAD,CAAlB;AACH;;AAEDK,UAAAA,IAAI,CAACJ,MAAL,GAAcA,MAAd;AACAI,UAAAA,IAAI,CAACK,MAAL,GAAc,IAAd;AACA,iBAAOL,IAAP;AACH;AAED;AACJ;AACA;;;AACWM,QAAAA,OAAO,CAAEN,IAAF,EAAc;AACxB,cAAI,CAACA,IAAL,EAAW;AACP;AACH;;AACD,cAAIH,IAAI,GAAGG,IAAI,CAACH,IAAhB;AACA,cAAIK,IAAI,GAAG,IAAX;;AACA,cAAI,KAAKZ,SAAL,CAAeW,cAAf,CAA8BJ,IAA9B,CAAJ,EAAyC;AACrC;AACAK,YAAAA,IAAI,GAAG,KAAKZ,SAAL,CAAeO,IAAf,CAAP;AACH,WAHD,MAGO;AACH;AACAK,YAAAA,IAAI,GAAG,IAAIhB,QAAJ,EAAP;AACA,iBAAKI,SAAL,CAAeO,IAAf,IAAuBK,IAAvB;AACH;;AAEDA,UAAAA,IAAI,CAACK,GAAL,CAASP,IAAT;AACH;AAED;AACJ;AACA;;;AACWQ,QAAAA,SAAS,CAAEX,IAAF,EAAgB;AAC5B,cAAI,KAAKP,SAAL,CAAeW,cAAf,CAA8BJ,IAA9B,CAAJ,EAAyC;AACrC,gBAAIK,IAAI,GAAG,KAAKZ,SAAL,CAAeO,IAAf,CAAX;AACAK,YAAAA,IAAI,CAACO,KAAL;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,OAAO,CAAEf,MAAF,EAAkBgB,OAAlB,EAAmC;AAC7C,cAAMd,IAAI,GAAGF,MAAM,CAACE,IAApB;AAEA,cAAIK,IAAI,GAAG,IAAIhB,QAAJ,EAAX;AACA,eAAKI,SAAL,CAAeO,IAAf,IAAuBK,IAAvB;;AAEA,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6BC,CAAC,EAA9B,EAAkC;AAC9B,gBAAMZ,IAAI,GAAGf,WAAW,CAACU,MAAD,CAAxB;AACAO,YAAAA,IAAI,CAACK,GAAL,CAASP,IAAT;AACH;AACJ;AAED;AACJ;AACA;;;AACWa,QAAAA,WAAW,CAAEC,KAAF,EAAc;AAE5BA,UAAAA,KAAK,CAACC,OAAN;AAEH;;AAtHoB,O,UAWNtB,S","sourcesContent":["import { _decorator, Prefab, Node, instantiate, NodePool } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"PoolManager\")\r\nexport class PoolManager {\r\n    /* class member could be defined like this */\r\n    // dummy = '';\r\n\r\n    /* use `property` decorator if your want the member to be serializable */\r\n    // @property\r\n    // serializableDummy = 0;\r\n\r\n    private _dictPool: any = {};\r\n    private _dictPrefab: any = {};\r\n\r\n    private static _instance: PoolManager;\r\n    /* class member could be defined like this */\r\n    // dummy = '';\r\n\r\n    /* use `property` decorator if your want the member to be serializable */\r\n    // @property\r\n    // serializableDummy = 0;\r\n\r\n    static get instance () {\r\n        if (this._instance) {\r\n            return this._instance;\r\n        }\r\n\r\n        this._instance = new PoolManager();\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 根据预设从对象池中获取对应节点\r\n     */\r\n    public getNode (prefab: Prefab, parent: Node) {\r\n        let name = prefab.name;\r\n        // @ts-ignore\r\n        if (!prefab.position) {\r\n            // @ts-ignore\r\n            name = prefab.data.name;\r\n        }\r\n\r\n        this._dictPrefab[name] = prefab;\r\n        let node = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            // 已有对应的对象池\r\n            let pool = this._dictPool[name];\r\n            if (pool.size() > 0) {\r\n                node = pool.get();\r\n            } else {\r\n                node = instantiate(prefab);\r\n            }\r\n        } else {\r\n            // 没有对应对象池，创建他！\r\n            let pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n\r\n            node = instantiate(prefab);\r\n        }\r\n\r\n        node.parent = parent;\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 将对应节点放回对象池中\r\n     */\r\n    public putNode (node: Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        let name = node.name;\r\n        let pool = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            // 已有对应的对象池\r\n            pool = this._dictPool[name];\r\n        } else {\r\n            // 没有对应对象池，创建他！\r\n            pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n        }\r\n\r\n        pool.put(node);\r\n    }\r\n\r\n    /**\r\n     * 根据名称，清除对应对象池\r\n     */\r\n    public clearPool (name: string) {\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            let pool = this._dictPool[name];\r\n            pool.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 预生成对象池\r\n    * @param prefab\r\n    * @param nodeNum\r\n    * 使用——PoolManager.instance.prePool(prefab, 40);\r\n    */\r\n    public prePool (prefab: Prefab, nodeNum: number) {\r\n        const name = prefab.name;\r\n\r\n        let pool = new NodePool();\r\n        this._dictPool[name] = pool;\r\n\r\n        for (let i = 0; i < nodeNum; i++) {\r\n            const node = instantiate(prefab);\r\n            pool.put(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * destroyNode\r\n     */\r\n    public destroyNode (point:Node) {\r\n\r\n        point.destroy();\r\n\r\n    }\r\n}\r\n"]}