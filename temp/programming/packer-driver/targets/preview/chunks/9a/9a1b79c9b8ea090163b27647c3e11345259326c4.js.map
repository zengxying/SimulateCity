{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","Quat","Vec2","Vec3","ccclass","property","v2_1","v2_2","qt_1","forward","right","MapOperateComp","_camera","_rotation","onLoad","copy","node","rotation","moveView","vec2","rotaView","x","y","rotateAround","update","dt","slerp"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAqCC,MAAAA,S,OAAAA,S;AAA6CC,MAAAA,I,OAAAA,I;AAAUC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;;;;;;;;OAKrG;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;AAExBO,MAAAA,I,GAAO,IAAIJ,IAAJ,E;AACPK,MAAAA,I,GAAO,IAAIL,IAAJ,E;AAGPM,MAAAA,I,GAAO,IAAIP,IAAJ,E;AACPQ,MAAAA,O,GAAU,IAAIN,IAAJ,E;AACVO,MAAAA,K,GAAQ,IAAIP,IAAJ,E;;gCAGDQ,c,WADZP,OAAO,CAAC,gBAAD,C,gBAAR,MACaO,cADb,SACoCX,SADpC,CAC8C;AAAA;AAAA;AAAA,eAElCY,OAFkC;AAAA,eAIlCC,SAJkC,GAIhB,IAAIZ,IAAJ,EAJgB;AAAA;;AAOhCa,QAAAA,MAAM,GAAS;AACrBb,UAAAA,IAAI,CAACc,IAAL,CAAU,KAAKF,SAAf,EAA2B,KAAKG,IAAL,CAAUC,QAArC;AACH;AAID;;;AACOC,QAAAA,QAAQ,CAACC,IAAD,EAAY,CAE1B;AAID;;;AACOC,QAAAA,QAAQ,CAACD,IAAD,EAAa;AAAE;AAE1B,cAAIE,CAAC,GAAGF,IAAI,CAACE,CAAb;AACA,cAAIC,CAAC,GAAGH,IAAI,CAACG,CAAb;AAEArB,UAAAA,IAAI,CAACsB,YAAL,CAAkB,KAAKV,SAAvB,EAAkC,KAAKA,SAAvC,EAAkD,KAAKG,IAAL,CAAUP,OAA5D,EAAqEa,CAArE;AACArB,UAAAA,IAAI,CAACsB,YAAL,CAAkB,KAAKV,SAAvB,EAAkC,KAAKA,SAAvC,EAAkD,KAAKG,IAAL,CAAUN,KAA5D,EAAmEW,CAAnE,EANwB,CAOxB;AACA;AACA;AACA;AACH;;AAEMG,QAAAA,MAAM,CAACC,EAAD,EAAa;AAEtB;AACAxB,UAAAA,IAAI,CAACyB,KAAL,CAAWlB,IAAX,EAAiB,KAAKI,OAAL,CAAaI,IAAb,CAAkBC,QAAnC,EAA6C,KAAKJ,SAAlD,EAA6DY,EAA7D;AACA,eAAKb,OAAL,CAAaI,IAAb,CAAkBC,QAAlB,GAA6BT,IAA7B;AACH;;AAvCyC,O","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, Node, Quat, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v3_1, v3_2 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { Log } from '../framework/Log';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst v2_1 = new Vec2();\r\nconst v2_2 = new Vec2();\r\n\r\n\r\nconst qt_1 = new Quat();\r\nconst forward = new Vec3();\r\nconst right = new Vec3();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _camera: CameraComponent;\r\n\r\n    private _rotation: Quat = new Quat();\r\n\r\n\r\n    protected onLoad(): void {\r\n        Quat.copy(this._rotation,  this.node.rotation);\r\n    }\r\n\r\n    \r\n\r\n    /** 移动 */\r\n    public moveView(vec2:Vec2) {\r\n\r\n    }\r\n\r\n\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        \r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n        \r\n        Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n\r\n    public update(dt: number) {\r\n       \r\n        // rotation\r\n        Quat.slerp(qt_1, this._camera.node.rotation, this._rotation, dt);\r\n        this._camera.node.rotation = qt_1;\r\n    }\r\n}\r\n\r\n\r\n"]}