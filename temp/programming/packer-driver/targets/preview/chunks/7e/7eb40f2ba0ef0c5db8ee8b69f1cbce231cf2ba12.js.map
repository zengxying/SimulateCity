{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","PhysicsSystem","Quat","Vec3","v3_1","v3_2","Msg","MsgEvent","CameraControllerComp","ccclass","property","MapOperateComp","slide","range","_rotation","_cameraRay","Ray","_centerPoint","_position","onLoad","copy","node","rotation","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","onDisable","off","forward","camera","pos","o","set","d","instance","raycast","r","raycastResults","i","length","item","collider","uuid","hitPoint","console","log","vec2","x","y","getPosition","subtract","rotateY","UP","add","update","dt","t","Math","min","damp","lerp","setPosition"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, Node, PhysicsSystem, Quat, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v3_1, v3_2 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _rotation: Quat = new Quat();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n\r\n    protected onLoad(): void {\r\n        Quat.copy(this._rotation, this.node.rotation);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.calculateRotaAxis.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        const forward = CameraControllerComp.camera.node.forward;\r\n        const pos = CameraControllerComp.camera.node.position;\r\n        this._cameraRay.o.set(pos);\r\n        this._cameraRay.d.set(forward);\r\n        if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n            const r = PhysicsSystem.instance.raycastResults;\r\n            for (let i = 0; i < r.length; i++) {\r\n                const item = r[i];\r\n                if (item.collider.node.uuid == this.node.uuid) {\r\n                    // 射线检测到自己了\r\n                    this._centerPoint.set(item.hitPoint);\r\n                }\r\n            }\r\n            console.log(\"射线检测:\", r);\r\n        } else {\r\n            console.log(\"射线检测:fail\");\r\n\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        v3_1.subtract(this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_1, Vec3.UP, y);\r\n        this._position.set(v3_2.add(v3_1));\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        // position\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n}\r\n\r\n\r\n"]}