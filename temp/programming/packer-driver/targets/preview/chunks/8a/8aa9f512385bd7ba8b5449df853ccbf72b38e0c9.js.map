{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","MeshRenderer","misc","Node","Quat","screen","Vec3","GlobalConst","ray","v3_1","v3_2","v3_3","Msg","MsgEvent","Util","ccclass","property","qt_1","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","_velocity","_speedScale","_meshRender","_preHit3DPoint","startAngle","originPos","onLoad","ins","node","getComponent","copy","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","moveView","OP_TOUCH_MOVE_MAP","moveMap","OP_TOUCH_START","calculateHitPoint","onDisable","off","vec2","camera","screenPointToRay","x","y","dis","intersect","rayModel","model","computeHit","set","createSphere","parent","resetRotaAxisDirty","windowSize","width","height","console","time","timeEnd","sphere","setPosition","getPosition","setRotaPos","_calculateRotaPos2","subtract","rotateY","UP","add","_calculateRotaPos","radian","localPosition","angle","degreesToRadians","cosAngle","Math","cos","sinAngle","sin","newX","z","newZ","addAngle","log","update","dt","t","min","damp","updateRotation","_upadtePosition","lerp","transformQuat","rotation","scaleAndAdd","fromEuler","slerp"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, MeshRenderer, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, ray, v2_1, v3_1, v3_2, v3_3 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nimport { Res } from '../res';\r\nimport { Util } from '../framework/util';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere: Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n\r\n    public static ins: MapOperateComp;\r\n    private _velocity: Vec3 = new Vec3();\r\n    private _speedScale: number = 1;\r\n\r\n    _meshRender: MeshRenderer;\r\n\r\n    private _preHit3DPoint: Vec3 = new Vec3();\r\n\r\n    protected onLoad(): void {\r\n        MapOperateComp.ins = this;\r\n        this._meshRender = this.node.getComponent(MeshRenderer);\r\n        Vec3.copy(this._eulerP, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this.moveView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE_MAP, this.moveMap.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_START, this.calculateHitPoint.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    calculateHitPoint(vec2: Vec2) {\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(this._preHit3DPoint, dis); // 性能要好些\r\n        }\r\n    }\r\n\r\n    moveMap(vec2: Vec2) {\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(vec2.x, vec2.y, ray);\r\n        let dis = geometry.intersect.rayModel(ray, this._meshRender.model);\r\n        if (dis) {\r\n            ray.computeHit(v3_1, dis); // 性能要好些\r\n            this._position.set(v3_1);\r\n            // Vec3.subtract(v3_2, v3_1, this._preHit3DPoint);\r\n            // this._preHit3DPoint.set(v3_1);\r\n\r\n            // this._velocity.set(v3_2);\r\n            Util.createSphere(this.node.parent, 0.5, v3_1);\r\n        }\r\n    }\r\n\r\n\r\n    resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    private moveView(vec2: Vec2) {\r\n        this.resetRotaAxisDirty();\r\n\r\n        // this._velocity.set(vec2.x, 0, vec2.y);\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n        this._rotaAxisDirty = false;\r\n        const camera = GlobalConst.camera;\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n        console.time(\"射线检测时间：\");\r\n\r\n        let dis = geometry.intersect.rayModel(this._cameraRay, this._meshRender.model);\r\n        if (dis) {\r\n            this._cameraRay.computeHit(this._centerPoint, dis); // 性能要好些\r\n        }\r\n        // if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n        //     const r = PhysicsSystem.instance.raycastResults;\r\n        //     for (let i = 0; i < r.length; i++) {\r\n        //         const item = r[i];\r\n        //         if (item.collider.node.uuid == this.node.uuid) {\r\n        //             // 射线检测到自己了\r\n        //             this._centerPoint.set(item.hitPoint);\r\n        //         }\r\n        //     }\r\n        //     console.log(\"射线检测:\", r);\r\n        // } else {\r\n        //     console.log(\"射线检测:fail\");\r\n\r\n        // }\r\n        console.timeEnd(\"射线检测时间：\");\r\n        console.time(\"射线检测时间 01：\");\r\n        if (this.sphere) {\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n        this.startAngle = 0;\r\n        this.node.getPosition(this.originPos);\r\n        console.timeEnd(\"射线检测时间 01：\");\r\n    }\r\n\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this.setRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        // this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n    private _calculateRotaPos2(y: number) {\r\n        this._eulerP.y += y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian: number) {\r\n        this._eulerP.y += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this._eulerP.y); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n\r\n    private startAngle: number = 0;\r\n    private originPos: Vec3 = new Vec3();\r\n    setRotaPos(addAngle: number) {\r\n        this._eulerP.y -= addAngle; // 一个旋转角度的计算不对也会导致地图展示出来不是想要的样子\r\n\r\n        this.startAngle += addAngle;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        Vec3.subtract(v3_1, this.originPos, this._centerPoint);\r\n        const localPosition = v3_1;\r\n        // const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this.startAngle); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        Util.createSphere(this.node.parent, 0.5, this._position);\r\n        // Res.instNode(this.sphere, this.node.parent, this._position);\r\n\r\n        console.log(`center point : x_>${this._centerPoint.x} y_>${this._centerPoint.y} z_>${this._centerPoint.z}`)\r\n        console.log(`center point : x_>${this._centerPoint.x} y_>${this._centerPoint.y} z_>${this._centerPoint.z}`)\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // // position\r\n        this._upadtePosition();\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n    }\r\n\r\n    private _upadtePosition() {\r\n        Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);\r\n        Vec3.scaleAndAdd(this._position, this._position, v3_1, this._speedScale);\r\n        this._velocity.set();\r\n    }\r\n\r\n    private updateRotation(t: number) { //TODO 参考Laya吧 \r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n}\r\n\r\n\r\n"]}