{"version":3,"sources":["file:///D:/cocos_work/SimulateCity/assets/src/component/mapOp/CameraControllerComp.ts"],"names":["_decorator","CameraComponent","Component","Quat","Vec3","GlobalConst","v3_1","Msg","MsgEvent","ccclass","property","qt_1","forward","right","CameraControllerComp","slide","range","_camera","_velocity","_position","_speedScale","distanceY","_euler","_rotaRatio","onLoad","ins","camera","node","getComponentInChildren","copy","getPosition","eulerAngles","onEnable","on","UPDATE_CAMERA_POSITION","updateCameraPosition","bind","OP_TOUCH_ROTA","rotaView","OP_TOUCH_SCALE","scaleView","onDisable","off","vec3","set","speed","Math","abs","y","transformQuat","UNIT_Z","rotation","scaleAndAdd","position","vec2","x","max","min","console","log","update","dt","t","damp","moveSpeed","lerp","setPosition","moveDir","cameraMoveDir","lengthSqr","FORWARD","normalize","cross","UP","z","fromEuler","slerp","moveView","scale","multiplyScalar","moveView2","test"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, misc, Node, Quat, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v3_1, v3_2 } from '../../GlobalConst';\r\nimport { Msg } from '../../msg/msg';\r\nimport { MsgEvent } from '../../msg/MsgEvent';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\nconst forward = new Vec3();\r\nconst right = new Vec3();\r\n\r\n@ccclass('CameraControllerComp')\r\nexport class CameraControllerComp extends Component {\r\n\r\n    private _camera: CameraComponent;\r\n\r\n    @property\r\n    public moveSpeed = 1;\r\n\r\n    @property\r\n    public moveSpeedShiftScale = 5;\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n\r\n    @property\r\n    public rotateSpeed = 1;\r\n\r\n    private _velocity = new Vec3();\r\n    private _position = new Vec3();\r\n    private _speedScale = 1;\r\n\r\n    distanceY: number = 200;\r\n    private _euler: Vec3 = new Vec3();\r\n\r\n    private _rotaRatio: number = 0.05;\r\n\r\n    // 移动  单指\r\n\r\n    // 旋转  双指\r\n    // 缩放\r\n\r\n    // 边界\r\n    // 数据区间\r\n\r\n    // 插值运算\r\n\r\n    protected onLoad(): void {\r\n        CameraControllerComp.ins = this;\r\n        GlobalConst.camera = this._camera = this.node.getComponentInChildren(CameraComponent);\r\n        Vec3.copy(this._position, this.node.getPosition());\r\n        Vec3.copy(this._euler,  this._camera.node.eulerAngles);\r\n\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        Msg.on(MsgEvent.UPDATE_CAMERA_POSITION, this.updateCameraPosition.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_SCALE, this.scaleView.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_SCALE, this.rotaView);\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA, this.scaleView);\r\n    }\r\n\r\n    updateCameraPosition(vec3: Vec3){\r\n        this._position.set(vec3);\r\n    }\r\n    \r\n\r\n    /** 缩放 */\r\n    public scaleView(speed: number) {\r\n        // Log.log(\"scaleView -- speed:\"+speed);\r\n        if(Math.abs(this._position.y + speed) < this.distanceY){\r\n            Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this._camera.node.rotation);\r\n            Vec3.scaleAndAdd(this._position, this.node.position, v3_1, speed);\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        return;\r\n        Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this._camera.node.rotation);\r\n\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n        x = this._euler.x + x * this._rotaRatio;\r\n        const max = -30;\r\n        const min = -90;\r\n        if(x < min || x > max){\r\n            if(x < min){\r\n                this._euler.x = min;\r\n            }\r\n            if(x > max){\r\n                this._euler.x = max;\r\n            }\r\n            console.log(\"旋转角度超标了\");\r\n            return;\r\n        }\r\n        this._euler.x = x;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        // position\r\n        Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);\r\n        Vec3.scaleAndAdd(this._position, this._position, v3_1, this.moveSpeed * this._speedScale);\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n        const moveDir = GlobalConst.cameraMoveDir;\r\n        if (moveDir.lengthSqr()) {\r\n            Vec3.transformQuat(forward, Vec3.FORWARD, this.node.rotation);\r\n            forward.normalize();\r\n            Vec3.cross(right, forward, Vec3.UP);\r\n            right.normalize();\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, forward, this.moveSpeed * this._speedScale * moveDir.z);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, right, this.moveSpeed * this._speedScale * moveDir.x);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n\r\n            Vec3.scaleAndAdd(this._position, this._position, Vec3.UP, this.moveSpeed * this._speedScale * moveDir.y);\r\n            Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n            this.node.setPosition(v3_1);\r\n        }\r\n\r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._euler.x, this._euler.y, this._euler.z);\r\n        Quat.slerp(qt_1, this._camera.node.rotation, qt_1, t);\r\n        this._camera.node.rotation = qt_1;\r\n        this._velocity.set();\r\n    }\r\n\r\n\r\n    //===================================================== 废弃代码============================\r\n    /** 移动 */\r\n    public moveView(vec2:Vec2) {\r\n        console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        const scale = 1 + this._position.y / this.distanceY * 10;\r\n        vec2.multiplyScalar(scale);\r\n        this._velocity.set(vec2.x, 0, vec2.y);\r\n        // this._camera.screenToWorld(this._velocity,this._velocity);\r\n        // Vec3.subtract(this._velocity, this._velocity, this._position);\r\n    }\r\n\r\n    /** 移动 */\r\n    public moveView2(vec2:Vec2) {\r\n        console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        const scale = 1 + this._position.y / this.distanceY * 10;\r\n        vec2.multiplyScalar(scale);\r\n        this._velocity.set(vec2.x, 0, vec2.y);\r\n        // this._camera.screenToWorld(this._velocity,this._velocity);\r\n        // Vec3.subtract(this._velocity, this._velocity, this._position);\r\n    }\r\n\r\n    public static ins:CameraControllerComp;\r\n    public static camera:Camera;\r\n    public static test(vec2:Vec2){\r\n\r\n        // console.log(\"转换出来的坐标:vec2 vec2\", vec2.x, vec2.y);\r\n        // v3_2.set(vec2.x, vec2.y, 0);\r\n        // this.ins._camera.screenToWorld(v3_2,v3_1);\r\n        // console.log(\"转换出来的坐标:\", v3_1.x, v3_1.y, v3_1.z);\r\n    }\r\n}\r\n\r\n\r\n"]}