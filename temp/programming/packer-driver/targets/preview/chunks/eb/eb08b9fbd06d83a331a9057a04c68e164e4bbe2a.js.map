{"version":3,"sources":["file:///D:/cocos_work/games/SimulateCity/assets/src/component/MapOperateComp.ts"],"names":["_decorator","Component","geometry","misc","Node","PhysicsSystem","Quat","screen","Vec3","v3_1","v3_2","v3_3","Msg","MsgEvent","CameraControllerComp","Res","ccclass","property","qt_1","MapOperateComp","slide","range","_eulerP","_cameraRay","Ray","_centerPoint","_position","_rotaAxisDirty","testRadian","onLoad","ins","copy","node","eulerAngles","position","onEnable","calculateRotaAxis","on","OP_TOUCH_ROTA","rotaView","bind","OP_TOUCH_MOVE","_resetRotaAxisDirty","onDisable","off","camera","screenPointToRay","windowSize","width","height","instance","raycast","r","raycastResults","i","length","item","collider","uuid","set","hitPoint","console","log","sphere","setPosition","vec2","x","y","_calculateRotaPos","_calculateRotaPos2","getPosition","subtract","rotateY","UP","add","radian","localPosition","angle","degreesToRadians","cosAngle","Math","cos","sinAngle","sin","newX","z","newZ","testRotaPos","instNode","parent","update","dt","t","min","damp","updateRotation","lerp","fromEuler","slerp","rotation"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CameraComponent, Component, director, EventTouch, game, geometry, misc, Node, PhysicsSystem, Quat, screen, sp, Vec2, Vec3 } from 'cc';\r\nimport { GlobalConst, v2_1, v3_1, v3_2, v3_3 } from '../GlobalConst';\r\nimport { Msg } from '../msg/msg';\r\nimport { MsgEvent } from '../msg/MsgEvent';\r\nimport { CameraControllerComp } from './CameraControllerComp';\r\nimport { Res } from '../res';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst qt_1 = new Quat();\r\n\r\n@ccclass('MapOperateComp')\r\nexport class MapOperateComp extends Component {\r\n\r\n    private _eulerP: Vec3 = new Vec3();\r\n\r\n    private _cameraRay: geometry.Ray = new geometry.Ray();\r\n    private _centerPoint: Vec3 = new Vec3();\r\n    private _position: Vec3 = new Vec3();\r\n\r\n    @property({ slide: true, range: [0.05, 0.5, 0.01] })\r\n    public damp = 0.2;\r\n    @property(Node)\r\n    sphere:Node;\r\n\r\n    private _rotaAxisDirty: boolean = true;\r\n\r\n    public static ins:MapOperateComp;\r\n\r\n    protected onLoad(): void {\r\n        MapOperateComp.ins = this;\r\n        Vec3.copy(this._eulerP, this.node.eulerAngles);\r\n        Vec3.copy(this._position, this.node.position);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.calculateRotaAxis();\r\n        Msg.on(MsgEvent.OP_TOUCH_ROTA, this.rotaView.bind(this));\r\n        Msg.on(MsgEvent.OP_TOUCH_MOVE, this._resetRotaAxisDirty.bind(this));\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        Msg.off(MsgEvent.OP_TOUCH_ROTA);\r\n    }\r\n\r\n\r\n    private _resetRotaAxisDirty() {\r\n        this._rotaAxisDirty = true;\r\n    }\r\n\r\n    /**\r\n     * 计算旋转的轴\r\n     */\r\n    public calculateRotaAxis() {\r\n        if (!this._rotaAxisDirty) return;\r\n        this._rotaAxisDirty = false;\r\n        const camera = CameraControllerComp.camera;\r\n        camera.screenPointToRay(screen.windowSize.width / 2, screen.windowSize.height / 2, this._cameraRay)\r\n\r\n        if (PhysicsSystem.instance.raycast(this._cameraRay)) {\r\n            const r = PhysicsSystem.instance.raycastResults;\r\n            for (let i = 0; i < r.length; i++) {\r\n                const item = r[i];\r\n                if (item.collider.node.uuid == this.node.uuid) {\r\n                    // 射线检测到自己了\r\n                    this._centerPoint.set(item.hitPoint);\r\n                }\r\n            }\r\n            console.log(\"射线检测:\", r);\r\n        } else {\r\n            console.log(\"射线检测:fail\");\r\n\r\n        }\r\n\r\n        if(this.sphere){\r\n            this.sphere.setPosition(this._centerPoint);\r\n        }\r\n    }\r\n\r\n    /** 旋转 */\r\n    public rotaView(vec2: Vec2) { // 旋转看着像是地图的旋转\r\n        this.calculateRotaAxis();\r\n        let x = vec2.x;\r\n        let y = vec2.y;\r\n\r\n        this._calculateRotaPos(y);\r\n        // console.log(\"yyyy----->\" + y);\r\n\r\n        // this._calculateRotaPos2(y);\r\n\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.forward, y);\r\n        // Quat.rotateAround(this._rotation, this._rotation, this.node.right, x);\r\n        // if (this._eulerP.x + x < -30 && this._eulerP.x + x > -90) { // x处角度的旋转限制 测试使用\r\n        //     this._eulerP.x += x;\r\n        // }\r\n        // this._eulerP.y += y;\r\n    }\r\n    private _calculateRotaPos2(y: number) {\r\n        this._eulerP.y += y;\r\n\r\n        this.node.getPosition(v3_1);\r\n        Vec3.subtract(v3_3, v3_1, this._centerPoint);\r\n\r\n        Vec3.rotateY(v3_2, v3_3, Vec3.UP, y);\r\n        this._position.set(this._centerPoint.add(v3_2));\r\n    }\r\n\r\n    private _calculateRotaPos(radian:number) {\r\n        this._eulerP.y += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this._eulerP.y); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n\r\n    private testRadian:number = 0;\r\n    testRotaPos(radian:number) {\r\n        this.testRadian += radian;\r\n\r\n        // 获取物体相对于旋转中心的位置\r\n        const localPosition = this.node.getPosition(v3_1).subtract(this._centerPoint);\r\n\r\n        // 计算旋转后的位置  每次旋转的值加上本身的旋转度数\r\n        const angle = misc.degreesToRadians(this.testRadian); // 转换成弧度 \r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const newX = localPosition.x * cosAngle - localPosition.z * sinAngle;\r\n        const newZ = localPosition.x * sinAngle + localPosition.z * cosAngle;\r\n\r\n        // 更新物体的位置\r\n        this._position.set(newX + this._centerPoint.x, this._position.y, newZ + this._centerPoint.z);\r\n\r\n\r\n        Res.instNode(this.sphere, this.node.parent, this._position);\r\n        // 使物体朝向旋转中心\r\n        // v3_1.set(this.node.eulerAngles)\r\n        // this.node.lookAt(this._centerPoint, Vec3.UP);\r\n        // this._eulerP.set(this.node.eulerAngles);\r\n        // this.node.eulerAngles = v3_1;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const t = Math.min(dt / this.damp, 1);\r\n        this.updateRotation(t);\r\n        // position\r\n        Vec3.lerp(v3_1, this.node.getPosition(), this._position, t);\r\n        this.node.setPosition(v3_1);\r\n\r\n\r\n    }\r\n\r\n    private updateRotation(t: number) { //TODO 参考Laya吧 \r\n        // rotation\r\n        Quat.fromEuler(qt_1, this._eulerP.x, this._eulerP.y, this._eulerP.z);\r\n        Quat.slerp(qt_1, this.node.rotation, qt_1, t);\r\n        this.node.rotation = qt_1;\r\n    }\r\n}\r\n\r\n\r\n"]}